meta {
  name: create_duplicate_category_error
  type: http
  seq: 1
}

post {
  url: {{apiUrl}}/api/v1/categories/
  body: json
  auth: none
}

headers {
  Authorization: Bearer {{idToken}}
  Content-Type: application/json
}

body:json {
  {
    "categoryName": "Duplicate Test Category",
    "categoryColor": "#FF5733"
  }
}

vars:pre-request {
  // First create a category with this name
  fetch(`${bru.getEnvVar("apiUrl")}/api/v1/categories/`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${bru.getEnvVar("idToken")}`
    },
    body: JSON.stringify({
      categoryName: "Duplicate Test Category",
      categoryColor: "#FF5733"
    })
  }).then(r => r.json()).then(data => {
    if (data.categoryId) {
      bru.setEnvVar("duplicateTestCategoryId", data.categoryId);
    }
  });
}

tests {
  test("Status is 400 (Bad Request)", function() {
    expect(res.status).to.equal(400);
  });

  test("Error message indicates duplicate category", function() {
    expect(res.body).to.have.property('error');
    expect(res.body.error.toLowerCase()).to.include('already exists');
  });

  // Cleanup: Delete the test category to keep environment clean
  vars:post-response {
    if (bru.getEnvVar("duplicateTestCategoryId")) {
      fetch(`${bru.getEnvVar("apiUrl")}/api/v1/categories/${bru.getEnvVar("duplicateTestCategoryId")}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${bru.getEnvVar("idToken")}`
        }
      });
    }
  }
}
