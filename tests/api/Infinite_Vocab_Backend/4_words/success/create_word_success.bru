meta {
  name: create_word_success
  type: http
  seq: 1
}

post {
  url: {{apiUrl}}/api/v1/words/
  body: json
  auth: none
}

headers {
  Authorization: Bearer {{idToken}}
  Content-Type: application/json
}

body:json {
  {
    "wordText": "innovative",
    "descriptionText": "Introducing new ideas; original and creative in thinking",
    "exampleText": "The company's innovative approach to sustainability impressed investors"
  }
}

tests {
  test("Status is 201", function() {
    expect(res.status).to.equal(201);
  });

  test("Response has camelCase fields", function() {
    expect(res.body).to.have.property('wordId');
    expect(res.body).to.have.property('userId');
    expect(res.body).to.have.property('wordText');
    expect(res.body).to.have.property('wordStars');
    expect(res.body).to.have.property('createdAt');
    expect(res.body).to.have.property('updatedAt');
  });

  test("Response includes descriptions and examples arrays", function() {
    expect(res.body).to.have.property('descriptions');
    expect(res.body).to.have.property('examples');
    expect(res.body.descriptions).to.be.an('array');
    expect(res.body.examples).to.be.an('array');
    expect(res.body.descriptions.length).to.be.greaterThan(0);
    expect(res.body.examples.length).to.be.greaterThan(0);
  });

  test("Word text matches request", function() {
    expect(res.body.wordText).to.equal('innovative');
  });
}

vars:post-response {
  wordId: res.body.wordId
}
